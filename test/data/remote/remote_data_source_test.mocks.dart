// Mocks generated by Mockito 5.0.17 from annotations
// in simple_e_learning/test/data/remote/remote_data_source_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;
import 'dart:typed_data' as _i9;

import 'package:dio/dio.dart' as _i2;
import 'package:file/file.dart' as _i5;
import 'package:flutter_cache_manager/flutter_cache_manager.dart' as _i6;
import 'package:flutter_cache_manager/src/cache_store.dart' as _i3;
import 'package:flutter_cache_manager/src/web/web_helper.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:simple_e_learning/data/remote/api_service/my_api_service.dart'
    as _i7;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeResponse_0<T> extends _i1.Fake implements _i2.Response<T> {}

class _FakeHeaders_1 extends _i1.Fake implements _i2.Headers {}

class _FakeRequestOptions_2 extends _i1.Fake implements _i2.RequestOptions {}

class _FakeUri_3 extends _i1.Fake implements Uri {}

class _FakeCacheStore_4 extends _i1.Fake implements _i3.CacheStore {}

class _FakeWebHelper_5 extends _i1.Fake implements _i4.WebHelper {}

class _FakeFile_6 extends _i1.Fake implements _i5.File {}

class _FakeFileInfo_7 extends _i1.Fake implements _i6.FileInfo {}

class _FakeDateTime_8 extends _i1.Fake implements DateTime {}

/// A class which mocks [MyApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMyApiService extends _i1.Mock implements _i7.MyApiService {
  MockMyApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.Response<dynamic>> fetchCourses() => (super.noSuchMethod(
          Invocation.method(#fetchCourses, []),
          returnValue:
              Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>()))
      as _i8.Future<_i2.Response<dynamic>>);
}

/// A class which mocks [Response].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponse<T> extends _i1.Mock implements _i2.Response<T> {
  MockResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set data(T? _data) => super.noSuchMethod(Invocation.setter(#data, _data),
      returnValueForMissingStub: null);
  @override
  _i2.Headers get headers => (super.noSuchMethod(Invocation.getter(#headers),
      returnValue: _FakeHeaders_1()) as _i2.Headers);
  @override
  set headers(_i2.Headers? _headers) =>
      super.noSuchMethod(Invocation.setter(#headers, _headers),
          returnValueForMissingStub: null);
  @override
  _i2.RequestOptions get requestOptions =>
      (super.noSuchMethod(Invocation.getter(#requestOptions),
          returnValue: _FakeRequestOptions_2()) as _i2.RequestOptions);
  @override
  set requestOptions(_i2.RequestOptions? _requestOptions) =>
      super.noSuchMethod(Invocation.setter(#requestOptions, _requestOptions),
          returnValueForMissingStub: null);
  @override
  set statusCode(int? _statusCode) =>
      super.noSuchMethod(Invocation.setter(#statusCode, _statusCode),
          returnValueForMissingStub: null);
  @override
  set statusMessage(String? _statusMessage) =>
      super.noSuchMethod(Invocation.setter(#statusMessage, _statusMessage),
          returnValueForMissingStub: null);
  @override
  Map<String, dynamic> get extra =>
      (super.noSuchMethod(Invocation.getter(#extra),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  set extra(Map<String, dynamic>? _extra) =>
      super.noSuchMethod(Invocation.setter(#extra, _extra),
          returnValueForMissingStub: null);
  @override
  List<_i2.RedirectRecord> get redirects =>
      (super.noSuchMethod(Invocation.getter(#redirects),
          returnValue: <_i2.RedirectRecord>[]) as List<_i2.RedirectRecord>);
  @override
  set redirects(List<_i2.RedirectRecord>? _redirects) =>
      super.noSuchMethod(Invocation.setter(#redirects, _redirects),
          returnValueForMissingStub: null);
  @override
  set isRedirect(bool? _isRedirect) =>
      super.noSuchMethod(Invocation.setter(#isRedirect, _isRedirect),
          returnValueForMissingStub: null);
  @override
  Uri get realUri => (super.noSuchMethod(Invocation.getter(#realUri),
      returnValue: _FakeUri_3()) as Uri);
}

/// A class which mocks [DefaultCacheManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockDefaultCacheManager extends _i1.Mock
    implements _i6.DefaultCacheManager {
  MockDefaultCacheManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.CacheStore get store => (super.noSuchMethod(Invocation.getter(#store),
      returnValue: _FakeCacheStore_4()) as _i3.CacheStore);
  @override
  _i4.WebHelper get webHelper =>
      (super.noSuchMethod(Invocation.getter(#webHelper),
          returnValue: _FakeWebHelper_5()) as _i4.WebHelper);
  @override
  _i8.Future<_i5.File> getSingleFile(String? url,
          {String? key, Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getSingleFile, [url], {#key: key, #headers: headers}),
              returnValue: Future<_i5.File>.value(_FakeFile_6()))
          as _i8.Future<_i5.File>);
  @override
  _i8.Stream<_i6.FileInfo> getFile(String? url,
          {String? key, Map<String, String>? headers}) =>
      (super.noSuchMethod(
          Invocation.method(#getFile, [url], {#key: key, #headers: headers}),
          returnValue:
              Stream<_i6.FileInfo>.empty()) as _i8.Stream<_i6.FileInfo>);
  @override
  _i8.Stream<_i6.FileResponse> getFileStream(String? url,
          {String? key,
          Map<String, String>? headers,
          bool? withProgress = false}) =>
      (super.noSuchMethod(
              Invocation.method(#getFileStream, [url],
                  {#key: key, #headers: headers, #withProgress: withProgress}),
              returnValue: Stream<_i6.FileResponse>.empty())
          as _i8.Stream<_i6.FileResponse>);
  @override
  _i8.Future<_i6.FileInfo> downloadFile(String? url,
          {String? key,
          Map<String, String>? authHeaders,
          bool? force = false}) =>
      (super.noSuchMethod(
              Invocation.method(#downloadFile, [url],
                  {#key: key, #authHeaders: authHeaders, #force: force}),
              returnValue: Future<_i6.FileInfo>.value(_FakeFileInfo_7()))
          as _i8.Future<_i6.FileInfo>);
  @override
  _i8.Future<_i6.FileInfo?> getFileFromCache(String? key,
          {bool? ignoreMemCache = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getFileFromCache, [key], {#ignoreMemCache: ignoreMemCache}),
              returnValue: Future<_i6.FileInfo?>.value())
          as _i8.Future<_i6.FileInfo?>);
  @override
  _i8.Future<_i6.FileInfo?> getFileFromMemory(String? key) =>
      (super.noSuchMethod(Invocation.method(#getFileFromMemory, [key]),
              returnValue: Future<_i6.FileInfo?>.value())
          as _i8.Future<_i6.FileInfo?>);
  @override
  _i8.Future<_i5.File> putFile(String? url, _i9.Uint8List? fileBytes,
          {String? key,
          String? eTag,
          Duration? maxAge = const Duration(days: 30),
          String? fileExtension = r'file'}) =>
      (super.noSuchMethod(
              Invocation.method(#putFile, [
                url,
                fileBytes
              ], {
                #key: key,
                #eTag: eTag,
                #maxAge: maxAge,
                #fileExtension: fileExtension
              }),
              returnValue: Future<_i5.File>.value(_FakeFile_6()))
          as _i8.Future<_i5.File>);
  @override
  _i8.Future<_i5.File> putFileStream(String? url, _i8.Stream<List<int>>? source,
          {String? key,
          String? eTag,
          Duration? maxAge = const Duration(days: 30),
          String? fileExtension = r'file'}) =>
      (super.noSuchMethod(
              Invocation.method(#putFileStream, [
                url,
                source
              ], {
                #key: key,
                #eTag: eTag,
                #maxAge: maxAge,
                #fileExtension: fileExtension
              }),
              returnValue: Future<_i5.File>.value(_FakeFile_6()))
          as _i8.Future<_i5.File>);
  @override
  _i8.Future<void> removeFile(String? key) =>
      (super.noSuchMethod(Invocation.method(#removeFile, [key]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> emptyCache() =>
      (super.noSuchMethod(Invocation.method(#emptyCache, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Stream<_i6.FileResponse> getImageFile(String? url,
          {String? key,
          Map<String, String>? headers,
          bool? withProgress = false,
          int? maxHeight,
          int? maxWidth}) =>
      (super.noSuchMethod(
              Invocation.method(#getImageFile, [
                url
              ], {
                #key: key,
                #headers: headers,
                #withProgress: withProgress,
                #maxHeight: maxHeight,
                #maxWidth: maxWidth
              }),
              returnValue: Stream<_i6.FileResponse>.empty())
          as _i8.Stream<_i6.FileResponse>);
}

/// A class which mocks [FileInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileInfo extends _i1.Mock implements _i6.FileInfo {
  MockFileInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.File get file =>
      (super.noSuchMethod(Invocation.getter(#file), returnValue: _FakeFile_6())
          as _i5.File);
  @override
  _i6.FileSource get source => (super.noSuchMethod(Invocation.getter(#source),
      returnValue: _i6.FileSource.NA) as _i6.FileSource);
  @override
  DateTime get validTill => (super.noSuchMethod(Invocation.getter(#validTill),
      returnValue: _FakeDateTime_8()) as DateTime);
  @override
  String get originalUrl =>
      (super.noSuchMethod(Invocation.getter(#originalUrl), returnValue: '')
          as String);
}
