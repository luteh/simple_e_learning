// Mocks generated by Mockito 5.0.17 from annotations
// in simple_e_learning/test/data/repository/my_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;
import 'dart:convert' as _i10;
import 'dart:io' as _i6;
import 'dart:typed_data' as _i11;

import 'package:file/file.dart' as _i5;
import 'package:flutter_cache_manager/flutter_cache_manager.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:simple_e_learning/data/local/local_data_source.dart' as _i9;
import 'package:simple_e_learning/data/remote/model/course_response.dart'
    as _i2;
import 'package:simple_e_learning/data/remote/remote_data_source.dart' as _i7;
import 'package:simple_e_learning/domain/model/course.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeCourseResponse_0 extends _i1.Fake implements _i2.CourseResponse {}

class _FakeFileInfo_1 extends _i1.Fake implements _i3.FileInfo {}

class _Fake$CourseResponseCopyWith_2<$Res> extends _i1.Fake
    implements _i2.$CourseResponseCopyWith<$Res> {}

class _FakeCourse_3 extends _i1.Fake implements _i4.Course {}

class _FakeFile_4 extends _i1.Fake implements _i5.File {}

class _FakeDateTime_5 extends _i1.Fake implements DateTime {}

class _FakeFileSystem_6 extends _i1.Fake implements _i5.FileSystem {}

class _FakeDirectory_7 extends _i1.Fake implements _i5.Directory {}

class _FakeUri_8 extends _i1.Fake implements Uri {}

class _FakeFileSystemEntity_9 extends _i1.Fake implements _i5.FileSystemEntity {
}

class _FakeFileStat_10 extends _i1.Fake implements _i6.FileStat {}

class _FakeRandomAccessFile_11 extends _i1.Fake
    implements _i6.RandomAccessFile {}

class _FakeIOSink_12 extends _i1.Fake implements _i6.IOSink {}

class _Fake$CourseCopyWith_13<$Res> extends _i1.Fake
    implements _i4.$CourseCopyWith<$Res> {}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i7.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.CourseResponse> fetchCourses() =>
      (super.noSuchMethod(Invocation.method(#fetchCourses, []),
              returnValue:
                  Future<_i2.CourseResponse>.value(_FakeCourseResponse_0()))
          as _i8.Future<_i2.CourseResponse>);
  @override
  _i8.Future<_i3.FileInfo> downloadFile({String? url}) =>
      (super.noSuchMethod(Invocation.method(#downloadFile, [], {#url: url}),
              returnValue: Future<_i3.FileInfo>.value(_FakeFileInfo_1()))
          as _i8.Future<_i3.FileInfo>);
}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i9.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.FileInfo?> getFileCache({String? key}) => (super.noSuchMethod(
      Invocation.method(#getFileCache, [], {#key: key}),
      returnValue: Future<_i3.FileInfo?>.value()) as _i8.Future<_i3.FileInfo?>);
  @override
  _i8.Future<void> removeFileCache({String? key}) =>
      (super.noSuchMethod(Invocation.method(#removeFileCache, [], {#key: key}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [CourseResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockCourseResponse extends _i1.Mock implements _i2.CourseResponse {
  MockCourseResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.$CourseResponseCopyWith<_i2.CourseResponse> get copyWith =>
      (super.noSuchMethod(Invocation.getter(#copyWith),
              returnValue: _Fake$CourseResponseCopyWith_2<_i2.CourseResponse>())
          as _i2.$CourseResponseCopyWith<_i2.CourseResponse>);
  @override
  _i4.Course toDomain() => (super.noSuchMethod(Invocation.method(#toDomain, []),
      returnValue: _FakeCourse_3()) as _i4.Course);
  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
}

/// A class which mocks [FileInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileInfo extends _i1.Mock implements _i3.FileInfo {
  MockFileInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.File get file =>
      (super.noSuchMethod(Invocation.getter(#file), returnValue: _FakeFile_4())
          as _i5.File);
  @override
  _i3.FileSource get source => (super.noSuchMethod(Invocation.getter(#source),
      returnValue: _i3.FileSource.NA) as _i3.FileSource);
  @override
  DateTime get validTill => (super.noSuchMethod(Invocation.getter(#validTill),
      returnValue: _FakeDateTime_5()) as DateTime);
  @override
  String get originalUrl =>
      (super.noSuchMethod(Invocation.getter(#originalUrl), returnValue: '')
          as String);
}

/// A class which mocks [File].
///
/// See the documentation for Mockito's code generation for more information.
class MockFile extends _i1.Mock implements _i5.File {
  MockFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.File get absolute => (super.noSuchMethod(Invocation.getter(#absolute),
      returnValue: _FakeFile_4()) as _i5.File);
  @override
  _i5.FileSystem get fileSystem =>
      (super.noSuchMethod(Invocation.getter(#fileSystem),
          returnValue: _FakeFileSystem_6()) as _i5.FileSystem);
  @override
  String get basename =>
      (super.noSuchMethod(Invocation.getter(#basename), returnValue: '')
          as String);
  @override
  String get dirname =>
      (super.noSuchMethod(Invocation.getter(#dirname), returnValue: '')
          as String);
  @override
  _i5.Directory get parent => (super.noSuchMethod(Invocation.getter(#parent),
      returnValue: _FakeDirectory_7()) as _i5.Directory);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  Uri get uri =>
      (super.noSuchMethod(Invocation.getter(#uri), returnValue: _FakeUri_8())
          as Uri);
  @override
  bool get isAbsolute =>
      (super.noSuchMethod(Invocation.getter(#isAbsolute), returnValue: false)
          as bool);
  @override
  _i8.Future<_i5.File> create({bool? recursive = false}) => (super.noSuchMethod(
          Invocation.method(#create, [], {#recursive: recursive}),
          returnValue: Future<_i5.File>.value(_FakeFile_4()))
      as _i8.Future<_i5.File>);
  @override
  _i8.Future<_i5.File> rename(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#rename, [newPath]),
              returnValue: Future<_i5.File>.value(_FakeFile_4()))
          as _i8.Future<_i5.File>);
  @override
  _i5.File renameSync(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#renameSync, [newPath]),
          returnValue: _FakeFile_4()) as _i5.File);
  @override
  _i8.Future<_i5.File> copy(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#copy, [newPath]),
              returnValue: Future<_i5.File>.value(_FakeFile_4()))
          as _i8.Future<_i5.File>);
  @override
  _i5.File copySync(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#copySync, [newPath]),
          returnValue: _FakeFile_4()) as _i5.File);
  @override
  _i8.Future<_i5.File> writeAsBytes(List<int>? bytes,
          {_i6.FileMode? mode = _i6.FileMode.write, bool? flush = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #writeAsBytes, [bytes], {#mode: mode, #flush: flush}),
              returnValue: Future<_i5.File>.value(_FakeFile_4()))
          as _i8.Future<_i5.File>);
  @override
  _i8.Future<_i5.File> writeAsString(String? contents,
          {_i6.FileMode? mode = _i6.FileMode.write,
          _i10.Encoding? encoding = const _i10.Utf8Codec(),
          bool? flush = false}) =>
      (super.noSuchMethod(
              Invocation.method(#writeAsString, [contents],
                  {#mode: mode, #encoding: encoding, #flush: flush}),
              returnValue: Future<_i5.File>.value(_FakeFile_4()))
          as _i8.Future<_i5.File>);
  @override
  _i8.Future<_i5.FileSystemEntity> delete({bool? recursive = false}) => (super
          .noSuchMethod(Invocation.method(#delete, [], {#recursive: recursive}),
              returnValue:
                  Future<_i5.FileSystemEntity>.value(_FakeFileSystemEntity_9()))
      as _i8.Future<_i5.FileSystemEntity>);
  @override
  _i8.Future<bool> exists() =>
      (super.noSuchMethod(Invocation.method(#exists, []),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  bool existsSync() => (super.noSuchMethod(Invocation.method(#existsSync, []),
      returnValue: false) as bool);
  @override
  _i8.Future<String> resolveSymbolicLinks() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinks, []),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  String resolveSymbolicLinksSync() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinksSync, []),
          returnValue: '') as String);
  @override
  _i8.Future<_i6.FileStat> stat() =>
      (super.noSuchMethod(Invocation.method(#stat, []),
              returnValue: Future<_i6.FileStat>.value(_FakeFileStat_10()))
          as _i8.Future<_i6.FileStat>);
  @override
  _i6.FileStat statSync() =>
      (super.noSuchMethod(Invocation.method(#statSync, []),
          returnValue: _FakeFileStat_10()) as _i6.FileStat);
  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
      Invocation.method(#deleteSync, [], {#recursive: recursive}),
      returnValueForMissingStub: null);
  @override
  _i8.Stream<_i6.FileSystemEvent> watch(
          {int? events = 15, bool? recursive = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #watch, [], {#events: events, #recursive: recursive}),
              returnValue: Stream<_i6.FileSystemEvent>.empty())
          as _i8.Stream<_i6.FileSystemEvent>);
  @override
  void createSync({bool? recursive = false}) => super.noSuchMethod(
      Invocation.method(#createSync, [], {#recursive: recursive}),
      returnValueForMissingStub: null);
  @override
  _i8.Future<int> length() =>
      (super.noSuchMethod(Invocation.method(#length, []),
          returnValue: Future<int>.value(0)) as _i8.Future<int>);
  @override
  int lengthSync() =>
      (super.noSuchMethod(Invocation.method(#lengthSync, []), returnValue: 0)
          as int);
  @override
  _i8.Future<DateTime> lastAccessed() =>
      (super.noSuchMethod(Invocation.method(#lastAccessed, []),
              returnValue: Future<DateTime>.value(_FakeDateTime_5()))
          as _i8.Future<DateTime>);
  @override
  DateTime lastAccessedSync() =>
      (super.noSuchMethod(Invocation.method(#lastAccessedSync, []),
          returnValue: _FakeDateTime_5()) as DateTime);
  @override
  _i8.Future<dynamic> setLastAccessed(DateTime? time) =>
      (super.noSuchMethod(Invocation.method(#setLastAccessed, [time]),
          returnValue: Future<dynamic>.value()) as _i8.Future<dynamic>);
  @override
  void setLastAccessedSync(DateTime? time) =>
      super.noSuchMethod(Invocation.method(#setLastAccessedSync, [time]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<DateTime> lastModified() =>
      (super.noSuchMethod(Invocation.method(#lastModified, []),
              returnValue: Future<DateTime>.value(_FakeDateTime_5()))
          as _i8.Future<DateTime>);
  @override
  DateTime lastModifiedSync() =>
      (super.noSuchMethod(Invocation.method(#lastModifiedSync, []),
          returnValue: _FakeDateTime_5()) as DateTime);
  @override
  _i8.Future<dynamic> setLastModified(DateTime? time) =>
      (super.noSuchMethod(Invocation.method(#setLastModified, [time]),
          returnValue: Future<dynamic>.value()) as _i8.Future<dynamic>);
  @override
  void setLastModifiedSync(DateTime? time) =>
      super.noSuchMethod(Invocation.method(#setLastModifiedSync, [time]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<_i6.RandomAccessFile> open(
          {_i6.FileMode? mode = _i6.FileMode.read}) =>
      (super.noSuchMethod(Invocation.method(#open, [], {#mode: mode}),
          returnValue: Future<_i6.RandomAccessFile>.value(
              _FakeRandomAccessFile_11())) as _i8.Future<_i6.RandomAccessFile>);
  @override
  _i6.RandomAccessFile openSync({_i6.FileMode? mode = _i6.FileMode.read}) =>
      (super.noSuchMethod(Invocation.method(#openSync, [], {#mode: mode}),
          returnValue: _FakeRandomAccessFile_11()) as _i6.RandomAccessFile);
  @override
  _i8.Stream<List<int>> openRead([int? start, int? end]) =>
      (super.noSuchMethod(Invocation.method(#openRead, [start, end]),
          returnValue: Stream<List<int>>.empty()) as _i8.Stream<List<int>>);
  @override
  _i6.IOSink openWrite(
          {_i6.FileMode? mode = _i6.FileMode.write,
          _i10.Encoding? encoding = const _i10.Utf8Codec()}) =>
      (super.noSuchMethod(
          Invocation.method(#openWrite, [], {#mode: mode, #encoding: encoding}),
          returnValue: _FakeIOSink_12()) as _i6.IOSink);
  @override
  _i8.Future<_i11.Uint8List> readAsBytes() =>
      (super.noSuchMethod(Invocation.method(#readAsBytes, []),
              returnValue: Future<_i11.Uint8List>.value(_i11.Uint8List(0)))
          as _i8.Future<_i11.Uint8List>);
  @override
  _i11.Uint8List readAsBytesSync() =>
      (super.noSuchMethod(Invocation.method(#readAsBytesSync, []),
          returnValue: _i11.Uint8List(0)) as _i11.Uint8List);
  @override
  _i8.Future<String> readAsString(
          {_i10.Encoding? encoding = const _i10.Utf8Codec()}) =>
      (super.noSuchMethod(
          Invocation.method(#readAsString, [], {#encoding: encoding}),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  String readAsStringSync({_i10.Encoding? encoding = const _i10.Utf8Codec()}) =>
      (super.noSuchMethod(
          Invocation.method(#readAsStringSync, [], {#encoding: encoding}),
          returnValue: '') as String);
  @override
  _i8.Future<List<String>> readAsLines(
          {_i10.Encoding? encoding = const _i10.Utf8Codec()}) =>
      (super.noSuchMethod(
              Invocation.method(#readAsLines, [], {#encoding: encoding}),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i8.Future<List<String>>);
  @override
  List<String> readAsLinesSync(
          {_i10.Encoding? encoding = const _i10.Utf8Codec()}) =>
      (super.noSuchMethod(
          Invocation.method(#readAsLinesSync, [], {#encoding: encoding}),
          returnValue: <String>[]) as List<String>);
  @override
  void writeAsBytesSync(List<int>? bytes,
          {_i6.FileMode? mode = _i6.FileMode.write, bool? flush = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #writeAsBytesSync, [bytes], {#mode: mode, #flush: flush}),
          returnValueForMissingStub: null);
  @override
  void writeAsStringSync(String? contents,
          {_i6.FileMode? mode = _i6.FileMode.write,
          _i10.Encoding? encoding = const _i10.Utf8Codec(),
          bool? flush = false}) =>
      super.noSuchMethod(
          Invocation.method(#writeAsStringSync, [contents],
              {#mode: mode, #encoding: encoding, #flush: flush}),
          returnValueForMissingStub: null);
}

/// A class which mocks [Course].
///
/// See the documentation for Mockito's code generation for more information.
class MockCourse extends _i1.Mock implements _i4.Course {
  MockCourse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get courseName =>
      (super.noSuchMethod(Invocation.getter(#courseName), returnValue: '')
          as String);
  @override
  String get progress =>
      (super.noSuchMethod(Invocation.getter(#progress), returnValue: '')
          as String);
  @override
  List<_i4.Curriculum> get curriculum =>
      (super.noSuchMethod(Invocation.getter(#curriculum),
          returnValue: <_i4.Curriculum>[]) as List<_i4.Curriculum>);
  @override
  _i4.$CourseCopyWith<_i4.Course> get copyWith =>
      (super.noSuchMethod(Invocation.getter(#copyWith),
              returnValue: _Fake$CourseCopyWith_13<_i4.Course>())
          as _i4.$CourseCopyWith<_i4.Course>);
}
