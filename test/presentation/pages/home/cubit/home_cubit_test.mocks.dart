// Mocks generated by Mockito 5.0.17 from annotations
// in simple_e_learning/test/presentation/pages/home/cubit/home_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:fpdart/fpdart.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:simple_e_learning/domain/core/result/failure.dart' as _i7;
import 'package:simple_e_learning/domain/core/usecase/no_param.dart' as _i8;
import 'package:simple_e_learning/domain/model/course.dart' as _i4;
import 'package:simple_e_learning/domain/repository/my_repository.dart' as _i2;
import 'package:simple_e_learning/domain/usecase/fetch_courses_usecase.dart'
    as _i5;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeMyRepository_0 extends _i1.Fake implements _i2.MyRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

class _Fake$CourseCopyWith_2<$Res> extends _i1.Fake
    implements _i4.$CourseCopyWith<$Res> {}

/// A class which mocks [FetchCoursesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchCoursesUseCase extends _i1.Mock
    implements _i5.FetchCoursesUseCase {
  MockFetchCoursesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MyRepository get myRepository =>
      (super.noSuchMethod(Invocation.getter(#myRepository),
          returnValue: _FakeMyRepository_0()) as _i2.MyRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i4.Course>> execute(_i8.NoParam? param) =>
      (super.noSuchMethod(Invocation.method(#execute, [param]),
              returnValue: Future<_i3.Either<_i7.Failure, _i4.Course>>.value(
                  _FakeEither_1<_i7.Failure, _i4.Course>()))
          as _i6.Future<_i3.Either<_i7.Failure, _i4.Course>>);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i4.Course>> call(_i8.NoParam? param) =>
      (super.noSuchMethod(Invocation.method(#call, [param]),
              returnValue: Future<_i3.Either<_i7.Failure, _i4.Course>>.value(
                  _FakeEither_1<_i7.Failure, _i4.Course>()))
          as _i6.Future<_i3.Either<_i7.Failure, _i4.Course>>);
}

/// A class which mocks [Course].
///
/// See the documentation for Mockito's code generation for more information.
class MockCourse extends _i1.Mock implements _i4.Course {
  MockCourse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get courseName =>
      (super.noSuchMethod(Invocation.getter(#courseName), returnValue: '')
          as String);
  @override
  String get progress =>
      (super.noSuchMethod(Invocation.getter(#progress), returnValue: '')
          as String);
  @override
  List<_i4.Curriculum> get curriculum =>
      (super.noSuchMethod(Invocation.getter(#curriculum),
          returnValue: <_i4.Curriculum>[]) as List<_i4.Curriculum>);
  @override
  _i4.$CourseCopyWith<_i4.Course> get copyWith =>
      (super.noSuchMethod(Invocation.getter(#copyWith),
              returnValue: _Fake$CourseCopyWith_2<_i4.Course>())
          as _i4.$CourseCopyWith<_i4.Course>);
}
