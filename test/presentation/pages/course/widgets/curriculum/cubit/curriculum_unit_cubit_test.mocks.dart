// Mocks generated by Mockito 5.0.17 from annotations
// in simple_e_learning/test/presentation/pages/course/widgets/curriculum/cubit/curriculum_unit_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;
import 'dart:convert' as _i10;
import 'dart:io' as _i4;
import 'dart:typed_data' as _i11;

import 'package:fpdart/fpdart.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:simple_e_learning/domain/core/result/failure.dart' as _i7;
import 'package:simple_e_learning/domain/repository/my_repository.dart' as _i2;
import 'package:simple_e_learning/domain/usecase/download_file_usecase.dart'
    as _i5;
import 'package:simple_e_learning/domain/usecase/get_file_cache_usecase.dart'
    as _i8;
import 'package:simple_e_learning/domain/usecase/remove_file_cache_usecase.dart'
    as _i9;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeMyRepository_0 extends _i1.Fake implements _i2.MyRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

class _FakeFile_2 extends _i1.Fake implements _i4.File {}

class _FakeUri_3 extends _i1.Fake implements Uri {}

class _FakeDirectory_4 extends _i1.Fake implements _i4.Directory {}

class _FakeDateTime_5 extends _i1.Fake implements DateTime {}

class _FakeRandomAccessFile_6 extends _i1.Fake implements _i4.RandomAccessFile {
}

class _FakeIOSink_7 extends _i1.Fake implements _i4.IOSink {}

class _FakeFileStat_8 extends _i1.Fake implements _i4.FileStat {}

class _FakeFileSystemEntity_9 extends _i1.Fake implements _i4.FileSystemEntity {
}

/// A class which mocks [DownloadFileUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDownloadFileUseCase extends _i1.Mock
    implements _i5.DownloadFileUseCase {
  MockDownloadFileUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MyRepository get myRepository =>
      (super.noSuchMethod(Invocation.getter(#myRepository),
          returnValue: _FakeMyRepository_0()) as _i2.MyRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i4.File>> execute(
          _i5.DownloadFileUseCaseParams? param) =>
      (super.noSuchMethod(Invocation.method(#execute, [param]),
              returnValue: Future<_i3.Either<_i7.Failure, _i4.File>>.value(
                  _FakeEither_1<_i7.Failure, _i4.File>()))
          as _i6.Future<_i3.Either<_i7.Failure, _i4.File>>);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i4.File>> call(
          _i5.DownloadFileUseCaseParams? param) =>
      (super.noSuchMethod(Invocation.method(#call, [param]),
              returnValue: Future<_i3.Either<_i7.Failure, _i4.File>>.value(
                  _FakeEither_1<_i7.Failure, _i4.File>()))
          as _i6.Future<_i3.Either<_i7.Failure, _i4.File>>);
}

/// A class which mocks [GetFileCacheUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFileCacheUseCase extends _i1.Mock
    implements _i8.GetFileCacheUseCase {
  MockGetFileCacheUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MyRepository get myRepository =>
      (super.noSuchMethod(Invocation.getter(#myRepository),
          returnValue: _FakeMyRepository_0()) as _i2.MyRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i4.File?>> execute(
          _i8.GetFileCacheUseCaseParams? param) =>
      (super.noSuchMethod(Invocation.method(#execute, [param]),
              returnValue: Future<_i3.Either<_i7.Failure, _i4.File?>>.value(
                  _FakeEither_1<_i7.Failure, _i4.File?>()))
          as _i6.Future<_i3.Either<_i7.Failure, _i4.File?>>);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i4.File?>> call(
          _i8.GetFileCacheUseCaseParams? param) =>
      (super.noSuchMethod(Invocation.method(#call, [param]),
              returnValue: Future<_i3.Either<_i7.Failure, _i4.File?>>.value(
                  _FakeEither_1<_i7.Failure, _i4.File?>()))
          as _i6.Future<_i3.Either<_i7.Failure, _i4.File?>>);
}

/// A class which mocks [RemoveFileCacheUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveFileCacheUseCase extends _i1.Mock
    implements _i9.RemoveFileCacheUseCase {
  MockRemoveFileCacheUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MyRepository get myRepository =>
      (super.noSuchMethod(Invocation.getter(#myRepository),
          returnValue: _FakeMyRepository_0()) as _i2.MyRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> execute(
          _i9.RemoveFileCacheUseCaseParams? param) =>
      (super.noSuchMethod(Invocation.method(#execute, [param]),
              returnValue: Future<_i3.Either<_i7.Failure, bool>>.value(
                  _FakeEither_1<_i7.Failure, bool>()))
          as _i6.Future<_i3.Either<_i7.Failure, bool>>);
  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> call(
          _i9.RemoveFileCacheUseCaseParams? param) =>
      (super.noSuchMethod(Invocation.method(#call, [param]),
              returnValue: Future<_i3.Either<_i7.Failure, bool>>.value(
                  _FakeEither_1<_i7.Failure, bool>()))
          as _i6.Future<_i3.Either<_i7.Failure, bool>>);
}

/// A class which mocks [File].
///
/// See the documentation for Mockito's code generation for more information.
class MockFile extends _i1.Mock implements _i4.File {
  MockFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.File get absolute => (super.noSuchMethod(Invocation.getter(#absolute),
      returnValue: _FakeFile_2()) as _i4.File);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  Uri get uri =>
      (super.noSuchMethod(Invocation.getter(#uri), returnValue: _FakeUri_3())
          as Uri);
  @override
  bool get isAbsolute =>
      (super.noSuchMethod(Invocation.getter(#isAbsolute), returnValue: false)
          as bool);
  @override
  _i4.Directory get parent => (super.noSuchMethod(Invocation.getter(#parent),
      returnValue: _FakeDirectory_4()) as _i4.Directory);
  @override
  _i6.Future<_i4.File> create({bool? recursive = false}) => (super.noSuchMethod(
          Invocation.method(#create, [], {#recursive: recursive}),
          returnValue: Future<_i4.File>.value(_FakeFile_2()))
      as _i6.Future<_i4.File>);
  @override
  void createSync({bool? recursive = false}) => super.noSuchMethod(
      Invocation.method(#createSync, [], {#recursive: recursive}),
      returnValueForMissingStub: null);
  @override
  _i6.Future<_i4.File> rename(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#rename, [newPath]),
              returnValue: Future<_i4.File>.value(_FakeFile_2()))
          as _i6.Future<_i4.File>);
  @override
  _i4.File renameSync(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#renameSync, [newPath]),
          returnValue: _FakeFile_2()) as _i4.File);
  @override
  _i6.Future<_i4.File> copy(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#copy, [newPath]),
              returnValue: Future<_i4.File>.value(_FakeFile_2()))
          as _i6.Future<_i4.File>);
  @override
  _i4.File copySync(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#copySync, [newPath]),
          returnValue: _FakeFile_2()) as _i4.File);
  @override
  _i6.Future<int> length() =>
      (super.noSuchMethod(Invocation.method(#length, []),
          returnValue: Future<int>.value(0)) as _i6.Future<int>);
  @override
  int lengthSync() =>
      (super.noSuchMethod(Invocation.method(#lengthSync, []), returnValue: 0)
          as int);
  @override
  _i6.Future<DateTime> lastAccessed() =>
      (super.noSuchMethod(Invocation.method(#lastAccessed, []),
              returnValue: Future<DateTime>.value(_FakeDateTime_5()))
          as _i6.Future<DateTime>);
  @override
  DateTime lastAccessedSync() =>
      (super.noSuchMethod(Invocation.method(#lastAccessedSync, []),
          returnValue: _FakeDateTime_5()) as DateTime);
  @override
  _i6.Future<dynamic> setLastAccessed(DateTime? time) =>
      (super.noSuchMethod(Invocation.method(#setLastAccessed, [time]),
          returnValue: Future<dynamic>.value()) as _i6.Future<dynamic>);
  @override
  void setLastAccessedSync(DateTime? time) =>
      super.noSuchMethod(Invocation.method(#setLastAccessedSync, [time]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<DateTime> lastModified() =>
      (super.noSuchMethod(Invocation.method(#lastModified, []),
              returnValue: Future<DateTime>.value(_FakeDateTime_5()))
          as _i6.Future<DateTime>);
  @override
  DateTime lastModifiedSync() =>
      (super.noSuchMethod(Invocation.method(#lastModifiedSync, []),
          returnValue: _FakeDateTime_5()) as DateTime);
  @override
  _i6.Future<dynamic> setLastModified(DateTime? time) =>
      (super.noSuchMethod(Invocation.method(#setLastModified, [time]),
          returnValue: Future<dynamic>.value()) as _i6.Future<dynamic>);
  @override
  void setLastModifiedSync(DateTime? time) =>
      super.noSuchMethod(Invocation.method(#setLastModifiedSync, [time]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<_i4.RandomAccessFile> open(
          {_i4.FileMode? mode = _i4.FileMode.read}) =>
      (super.noSuchMethod(Invocation.method(#open, [], {#mode: mode}),
              returnValue:
                  Future<_i4.RandomAccessFile>.value(_FakeRandomAccessFile_6()))
          as _i6.Future<_i4.RandomAccessFile>);
  @override
  _i4.RandomAccessFile openSync({_i4.FileMode? mode = _i4.FileMode.read}) =>
      (super.noSuchMethod(Invocation.method(#openSync, [], {#mode: mode}),
          returnValue: _FakeRandomAccessFile_6()) as _i4.RandomAccessFile);
  @override
  _i6.Stream<List<int>> openRead([int? start, int? end]) =>
      (super.noSuchMethod(Invocation.method(#openRead, [start, end]),
          returnValue: Stream<List<int>>.empty()) as _i6.Stream<List<int>>);
  @override
  _i4.IOSink openWrite(
          {_i4.FileMode? mode = _i4.FileMode.write,
          _i10.Encoding? encoding = const _i10.Utf8Codec()}) =>
      (super.noSuchMethod(
          Invocation.method(#openWrite, [], {#mode: mode, #encoding: encoding}),
          returnValue: _FakeIOSink_7()) as _i4.IOSink);
  @override
  _i6.Future<_i11.Uint8List> readAsBytes() =>
      (super.noSuchMethod(Invocation.method(#readAsBytes, []),
              returnValue: Future<_i11.Uint8List>.value(_i11.Uint8List(0)))
          as _i6.Future<_i11.Uint8List>);
  @override
  _i11.Uint8List readAsBytesSync() =>
      (super.noSuchMethod(Invocation.method(#readAsBytesSync, []),
          returnValue: _i11.Uint8List(0)) as _i11.Uint8List);
  @override
  _i6.Future<String> readAsString(
          {_i10.Encoding? encoding = const _i10.Utf8Codec()}) =>
      (super.noSuchMethod(
          Invocation.method(#readAsString, [], {#encoding: encoding}),
          returnValue: Future<String>.value('')) as _i6.Future<String>);
  @override
  String readAsStringSync({_i10.Encoding? encoding = const _i10.Utf8Codec()}) =>
      (super.noSuchMethod(
          Invocation.method(#readAsStringSync, [], {#encoding: encoding}),
          returnValue: '') as String);
  @override
  _i6.Future<List<String>> readAsLines(
          {_i10.Encoding? encoding = const _i10.Utf8Codec()}) =>
      (super.noSuchMethod(
              Invocation.method(#readAsLines, [], {#encoding: encoding}),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i6.Future<List<String>>);
  @override
  List<String> readAsLinesSync(
          {_i10.Encoding? encoding = const _i10.Utf8Codec()}) =>
      (super.noSuchMethod(
          Invocation.method(#readAsLinesSync, [], {#encoding: encoding}),
          returnValue: <String>[]) as List<String>);
  @override
  _i6.Future<_i4.File> writeAsBytes(List<int>? bytes,
          {_i4.FileMode? mode = _i4.FileMode.write, bool? flush = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #writeAsBytes, [bytes], {#mode: mode, #flush: flush}),
              returnValue: Future<_i4.File>.value(_FakeFile_2()))
          as _i6.Future<_i4.File>);
  @override
  void writeAsBytesSync(List<int>? bytes,
          {_i4.FileMode? mode = _i4.FileMode.write, bool? flush = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #writeAsBytesSync, [bytes], {#mode: mode, #flush: flush}),
          returnValueForMissingStub: null);
  @override
  _i6.Future<_i4.File> writeAsString(String? contents,
          {_i4.FileMode? mode = _i4.FileMode.write,
          _i10.Encoding? encoding = const _i10.Utf8Codec(),
          bool? flush = false}) =>
      (super.noSuchMethod(
              Invocation.method(#writeAsString, [contents],
                  {#mode: mode, #encoding: encoding, #flush: flush}),
              returnValue: Future<_i4.File>.value(_FakeFile_2()))
          as _i6.Future<_i4.File>);
  @override
  void writeAsStringSync(String? contents,
          {_i4.FileMode? mode = _i4.FileMode.write,
          _i10.Encoding? encoding = const _i10.Utf8Codec(),
          bool? flush = false}) =>
      super.noSuchMethod(
          Invocation.method(#writeAsStringSync, [contents],
              {#mode: mode, #encoding: encoding, #flush: flush}),
          returnValueForMissingStub: null);
  @override
  _i6.Future<bool> exists() =>
      (super.noSuchMethod(Invocation.method(#exists, []),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  bool existsSync() => (super.noSuchMethod(Invocation.method(#existsSync, []),
      returnValue: false) as bool);
  @override
  _i6.Future<String> resolveSymbolicLinks() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinks, []),
          returnValue: Future<String>.value('')) as _i6.Future<String>);
  @override
  String resolveSymbolicLinksSync() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinksSync, []),
          returnValue: '') as String);
  @override
  _i6.Future<_i4.FileStat> stat() =>
      (super.noSuchMethod(Invocation.method(#stat, []),
              returnValue: Future<_i4.FileStat>.value(_FakeFileStat_8()))
          as _i6.Future<_i4.FileStat>);
  @override
  _i4.FileStat statSync() =>
      (super.noSuchMethod(Invocation.method(#statSync, []),
          returnValue: _FakeFileStat_8()) as _i4.FileStat);
  @override
  _i6.Future<_i4.FileSystemEntity> delete({bool? recursive = false}) => (super
          .noSuchMethod(Invocation.method(#delete, [], {#recursive: recursive}),
              returnValue:
                  Future<_i4.FileSystemEntity>.value(_FakeFileSystemEntity_9()))
      as _i6.Future<_i4.FileSystemEntity>);
  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
      Invocation.method(#deleteSync, [], {#recursive: recursive}),
      returnValueForMissingStub: null);
  @override
  _i6.Stream<_i4.FileSystemEvent> watch(
          {int? events = 15, bool? recursive = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #watch, [], {#events: events, #recursive: recursive}),
              returnValue: Stream<_i4.FileSystemEvent>.empty())
          as _i6.Stream<_i4.FileSystemEvent>);
}
